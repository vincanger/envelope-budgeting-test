app envelopeBudgeter {
  wasp: {
    version: "^0.16.2"
  },
  title: "envelope budgeter",
  head: [
    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />",
    "<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />",
    "<link href=\"https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Manrope:wght@200..800&display=swap\" rel=\"stylesheet\" />"
  ],
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "Envelope Budgeter",
          email: "noreply@example.com"
        },
        emailVerification: {
          clientRoute: VerifyEmailRoute
        },
        passwordReset: {
          clientRoute: PasswordResetRoute
        },
        userSignupFields: import { getEmailUserFields } from "@src/features/auth/userSignupFields.ts"
      },
    },
    onAuthFailedRedirectTo: "/sign-in",
    onAuthSucceededRedirectTo: "/",
    onBeforeSignup: import { onBeforeSignup } from "@src/server/authHooks.ts",
    onAfterSignup: import { updateInvitationStatus } from "@src/server/authHooks.ts",
  },
  emailSender: {
    provider: Dummy,
    defaultFrom: {
      name: "Budgeting App",
      email: "noreply@budgetapp.dev"
    }
  },
  client: {
    rootComponent: import Main from "@src/main",
    setupFn: import QuerySetup from "@src/config/querySetup",
  },
}

route SignupRoute { path: "/sign-up", to: Signup }
page Signup {
  component: import { Signup } from "@src/features/auth/signup"
}

route LoginRoute { path: "/sign-in", to: Login }
page Login {
  component: import { Login } from "@src/features/auth/login"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/features/auth/RequestPasswordResetPage"
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/features/auth/PasswordResetPage"
}

route VerifyEmailRoute { path: "/verify-email", to: VerifyEmailPage }
page VerifyEmailPage {
  component: import { VerifyEmailPage } from "@src/features/auth/VerifyEmailPage"
}

route ChatsRoute { path: "/chats", to: Chats }
page Chats {
  component: import Chats from "@src/features/chats/index"
}

route SettingsRoute { path: "/settings/*", to: Settings }
page Settings {
  component: import Settings from "@src/features/settings/index"
}

// TODO: add route
// route HelpCenterRoute { path: "/help-center", to: HelpCenter }
// page HelpCenter {
//   component: import { HelpCenter } from "@src/features/help-center/index"
// }

route DashboardRoute { path: "/", to: Dashboard }
page Dashboard {
  component: import Dashboard from "@src/features/dashboard/index"
}

route EnvelopesRoute { path: "/envelopes", to: EnvelopesPage }
page EnvelopesPage {
  component: import { EnvelopesPage } from "@src/features/envelopes/EnvelopesPage.tsx"
}

route TransactionsRoute { path: "/transactions", to: TransactionsPage }
page TransactionsPage {
  component: import { TransactionsPage } from "@src/features/transactions/TransactionsPage.tsx"
}

route TasksRoute { path: "/tasks", to: Tasks }
page Tasks {
  component: import Tasks from "@src/features/tasks/index"
}

route AppsRoute { path: "/apps", to: Apps }
page Apps {
  component: import Apps from "@src/features/apps/index"
}

route UsersRoute { path: "/users", to: Users }
page Users {
  component: import Users from "@src/features/users/index"
}

//#region Error Routes
route GeneralErrorRoute { path: "/500", to: GeneralError }
page GeneralError {
  component: import GeneralError from "@src/features/errors/general-error"
}

route NotFoundRoute { path: "/404", to: NotFound }
page NotFound {
  component: import NotFound from "@src/features/errors/not-found-error"
}

route ForbiddenRoute { path: "/403", to: Forbidden }
page Forbidden {
  component: import Forbidden from "@src/features/errors/forbidden"
}

route UnauthorizedRoute { path: "/401", to: Unauthorized }
page Unauthorized {
  component: import Unauthorized from "@src/features/errors/unauthorized-error"
}

route MaintenanceRoute { path: "/maintenance", to: Maintenance }
page Maintenance {
  component: import Maintenance from "@src/features/errors/maintenance-error"
}
//#endregion

//#region User Profile

route UserProfileRoute { path: "/profile", to: UserProfilePage }
page UserProfilePage {
  component: import { UserProfilePage } from "@src/features/user/UserProfilePage.tsx"
}

action updateUserProfile {
  fn: import { updateUserProfile } from "@src/features/user/operations.ts",
  entities: [User]
}

query getCurrentUserProfile {
  fn: import { getCurrentUserProfile } from "@src/features/user/operations.js",
  entities: [UserBudgetProfile]
}

query getUsers {
  fn: import { getUsers } from "@src/features/user/operations.ts",
  entities: [User] // Only needs User entity access
}

//#endregion

//#region Budget Profile

route CreateBudgetProfileRoute { path: "/create-profile", to: CreateBudgetProfilePage }
page CreateBudgetProfilePage {
  component: import { CreateBudgetProfilePage } from "@src/features/budgets/CreateBudgetProfilePage.tsx"
}

action createBudgetProfile {
  fn: import { createBudgetProfile } from "@src/features/budgets/operations.ts",
  entities: [BudgetProfile, User]
}

query getBudgetProfileMembers {
  fn: import { getBudgetProfileMembers } from "@src/features/budgets/operations.ts",
  // Needs UserBudgetProfile for the check and result, User for user details, BudgetProfile for context
  entities: [UserBudgetProfile, User, BudgetProfile] 
}

action inviteUser {
  fn: import { inviteUser } from "@src/features/budgets/operations.ts",
  // Needs User to find invitee, UserBudgetProfile to check/create, BudgetProfile for context
  entities: [User, UserBudgetProfile, BudgetProfile, Invitation]
}

query getPendingInvitations {
  fn: import { getPendingInvitations } from "@src/features/budgets/operations.ts",
  // Needs Invitation to fetch, UserBudgetProfile/BudgetProfile for permissions
  entities: [Invitation, UserBudgetProfile, BudgetProfile]
}

action revokeInvitation {
  fn: import { revokeInvitation } from "@src/features/budgets/operations.ts",
  // Needs Invitation to delete, UserBudgetProfile/BudgetProfile for permissions
  entities: [Invitation, UserBudgetProfile, BudgetProfile]
}

action updateMemberRole {
  fn: import { updateMemberRole } from "@src/features/budgets/operations.ts",
  // Needs UserBudgetProfile to update and check permissions, BudgetProfile for context
  entities: [UserBudgetProfile, BudgetProfile]
}

action removeMember {
  fn: import { removeMember } from "@src/features/budgets/operations.ts",
  // Needs UserBudgetProfile to delete and check permissions, BudgetProfile for context
  entities: [UserBudgetProfile, BudgetProfile]
}

//#endregion

//#region Envelopes

query getEnvelopes {
  fn: import { getEnvelopes } from "@src/features/envelopes/operations.ts",
  entities: [Envelope, BudgetProfile, UserBudgetProfile] // Need BudgetProfile to check ownership
}

action createEnvelope {
  fn: import { createEnvelope } from "@src/features/envelopes/operations.ts",
  entities: [Envelope, BudgetProfile, UserBudgetProfile] // Need BudgetProfile to link
}

action updateEnvelope {
  fn: import { updateEnvelope } from "@src/features/envelopes/operations.ts",
  entities: [Envelope, BudgetProfile, UserBudgetProfile] // Need BudgetProfile to check ownership
}

action deleteEnvelope {
  fn: import { deleteEnvelope } from "@src/features/envelopes/operations.ts",
  entities: [Envelope, BudgetProfile, UserBudgetProfile, Transaction] // Need Transaction to check count
}

//#endregion

//#region Transactions

query getTransactions {
  fn: import { getTransactions } from "@src/features/transactions/operations.ts",
  entities: [Transaction, BudgetProfile, UserBudgetProfile] // Need BudgetProfile for auth check
}

action createTransaction {
  fn: import { createTransaction } from "@src/features/transactions/operations.ts",
  entities: [Transaction, BudgetProfile, UserBudgetProfile, Envelope, User] // Need all for linking/checks
}

action updateTransaction {
  fn: import { updateTransaction } from "@src/features/transactions/operations.ts",
  entities: [Transaction, BudgetProfile, UserBudgetProfile, Envelope] // Need all for checks
}

action deleteTransaction {
  fn: import { deleteTransaction } from "@src/features/transactions/operations.ts",
  entities: [Transaction, BudgetProfile, UserBudgetProfile, Envelope] // Added Envelope
}

//#endregion

//#region Settings
route SettingsMembersRoute { path: "/settings/members", to: SettingsMembersPage }
page SettingsMembersPage { 
  component: import { MembersPage } from "@src/features/settings/MembersPage.tsx",
  authRequired: true
}
//#endregion
